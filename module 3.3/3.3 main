package com.jiwon.module3._2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static ArrayList<Node> graph;
    public static void main(String[] args) throws FileNotFoundException {
        /* Use setupTree() to get tree information from an input file */
        //setupTree();

        /* Add test nodes */
        graph = new ArrayList<>();
        graph.add(new Node(5, new Integer(3), new Integer(8)));
        graph.add(new Node(3, new Integer(1), new Integer(4)));
        graph.add(new Node(8, new Integer(7), new Integer(10)));
        graph.add(new Node(1));
        graph.add(new Node(4));
        graph.add(new Node(7));
        graph.add(new Node(10));

        System.out.println("BFS ----- ");
        System.out.println("Printing leaf nodes ----- ");
        Node root = graph.get(0);
        printLeafNodes_BFS(root);
    }

    /**
     * This is the main function to explore the graph tree based on BFS using recursion
     * @param n
     * @return
     */
    static int printLeafNodes_BFS(Node n) {
        if (n == null) {
            return 0;
        }

        if(n.isLeaf()) {            // Check leaf node
            System.out.println(n);  // if this is a leaf node, print it
            return 1;
        } else {                    // if not, call printLeafNodes_BFS recursively for left and right nodes
            int left = graph.indexOf(new Node(n.getLeft().intValue()));
            int right = graph.indexOf(new Node(n.getRight().intValue()));
            return printLeafNodes_BFS(graph.get(left)) + printLeafNodes_BFS(graph.get(right));
        }
    }

    /**
     * This function is used to setup a tree from an input file
     * @throws FileNotFoundException
     */
    private static void setupTree() throws FileNotFoundException {
        graph = new ArrayList<>();
//        Scanner scan = new Scanner(new File("tree.txt"));
        Scanner scan = new Scanner(new File("tree1.txt"));
        while(scan.hasNext()){
            String line = scan.nextLine();
            parseLine(line);
        }
    }

    /**
     * This function is used to add node elements to graph arraylist
     * @param line
     */
    private static void parseLine(String line) {
        String[] nodes = line.split(" ");
        int parent = Integer.parseInt(nodes[0]);
        if (nodes.length == 2) {
            addNode(new Node(parent, Integer.parseInt(nodes[1]), null));
            addNode(new Node(Integer.parseInt(nodes[1])));
        } else if (nodes.length == 3) {
            addNode(new Node(parent, Integer.parseInt(nodes[1]), Integer.parseInt(nodes[2])));
            addNode(new Node(Integer.parseInt(nodes[1])));
            addNode(new Node(Integer.parseInt(nodes[2])));
        }
    }

    /**
     * Check if a node already exists in the graph array.
     * @param n
     */
    private static void addNode(Node n) {
        if (graph.indexOf(n)>=0) {
            graph.set(graph.indexOf(n), n);
        } else {
            graph.add(n);
        }
    }

}
